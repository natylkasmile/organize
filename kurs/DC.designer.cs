#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.34011
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace kurs
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="bd")]
	public partial class DCDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Определения метода расширяемости
    partial void OnCreated();
    partial void InsertGroup(Group instance);
    partial void UpdateGroup(Group instance);
    partial void DeleteGroup(Group instance);
    partial void InsertGroup_Sub(Group_Sub instance);
    partial void UpdateGroup_Sub(Group_Sub instance);
    partial void DeleteGroup_Sub(Group_Sub instance);
    partial void InsertLessons(Lessons instance);
    partial void UpdateLessons(Lessons instance);
    partial void DeleteLessons(Lessons instance);
    partial void InsertMark(Mark instance);
    partial void UpdateMark(Mark instance);
    partial void DeleteMark(Mark instance);
    partial void InsertPractice(Practice instance);
    partial void UpdatePractice(Practice instance);
    partial void DeletePractice(Practice instance);
    partial void InsertSchedule(Schedule instance);
    partial void UpdateSchedule(Schedule instance);
    partial void DeleteSchedule(Schedule instance);
    partial void InsertStudent(Student instance);
    partial void UpdateStudent(Student instance);
    partial void DeleteStudent(Student instance);
    partial void InsertSubject(Subject instance);
    partial void UpdateSubject(Subject instance);
    partial void DeleteSubject(Subject instance);
    partial void InsertTheme(Theme instance);
    partial void UpdateTheme(Theme instance);
    partial void DeleteTheme(Theme instance);
    partial void InsertTheor_ques(Theor_ques instance);
    partial void UpdateTheor_ques(Theor_ques instance);
    partial void DeleteTheor_ques(Theor_ques instance);
    partial void InsertTranslate(Translate instance);
    partial void UpdateTranslate(Translate instance);
    partial void DeleteTranslate(Translate instance);
    partial void InsertType_answer(Type_answer instance);
    partial void UpdateType_answer(Type_answer instance);
    partial void DeleteType_answer(Type_answer instance);
    partial void InsertType_question(Type_question instance);
    partial void UpdateType_question(Type_question instance);
    partial void DeleteType_question(Type_question instance);
    #endregion
		
		public DCDataContext() : 
				base(global::kurs.Properties.Settings.Default.bdConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DCDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DCDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DCDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DCDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Group> Group
		{
			get
			{
				return this.GetTable<Group>();
			}
		}
		
		public System.Data.Linq.Table<Group_Sub> Group_Sub
		{
			get
			{
				return this.GetTable<Group_Sub>();
			}
		}
		
		public System.Data.Linq.Table<Lessons> Lessons
		{
			get
			{
				return this.GetTable<Lessons>();
			}
		}
		
		public System.Data.Linq.Table<Mark> Mark
		{
			get
			{
				return this.GetTable<Mark>();
			}
		}
		
		public System.Data.Linq.Table<Practice> Practice
		{
			get
			{
				return this.GetTable<Practice>();
			}
		}
		
		public System.Data.Linq.Table<Schedule> Schedule
		{
			get
			{
				return this.GetTable<Schedule>();
			}
		}
		
		public System.Data.Linq.Table<Student> Student
		{
			get
			{
				return this.GetTable<Student>();
			}
		}
		
		public System.Data.Linq.Table<Subject> Subject
		{
			get
			{
				return this.GetTable<Subject>();
			}
		}
		
		public System.Data.Linq.Table<Theme> Theme
		{
			get
			{
				return this.GetTable<Theme>();
			}
		}
		
		public System.Data.Linq.Table<Theor_ques> Theor_ques
		{
			get
			{
				return this.GetTable<Theor_ques>();
			}
		}
		
		public System.Data.Linq.Table<Translate> Translate
		{
			get
			{
				return this.GetTable<Translate>();
			}
		}
		
		public System.Data.Linq.Table<Type_answer> Type_answer
		{
			get
			{
				return this.GetTable<Type_answer>();
			}
		}
		
		public System.Data.Linq.Table<Type_question> Type_question
		{
			get
			{
				return this.GetTable<Type_question>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[Group]")]
	public partial class Group : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id_group;
		
		private string _name_group;
		
		private EntitySet<Group_Sub> _Group_Sub;
		
		private EntitySet<Student> _Student;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnId_groupChanging(int value);
    partial void OnId_groupChanged();
    partial void Onname_groupChanging(string value);
    partial void Onname_groupChanged();
    #endregion
		
		public Group()
		{
			this._Group_Sub = new EntitySet<Group_Sub>(new Action<Group_Sub>(this.attach_Group_Sub), new Action<Group_Sub>(this.detach_Group_Sub));
			this._Student = new EntitySet<Student>(new Action<Student>(this.attach_Student), new Action<Student>(this.detach_Student));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id_group", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id_group
		{
			get
			{
				return this._Id_group;
			}
			set
			{
				if ((this._Id_group != value))
				{
					this.OnId_groupChanging(value);
					this.SendPropertyChanging();
					this._Id_group = value;
					this.SendPropertyChanged("Id_group");
					this.OnId_groupChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name_group", DbType="NChar(15) NOT NULL", CanBeNull=false)]
		public string name_group
		{
			get
			{
				return this._name_group;
			}
			set
			{
				if ((this._name_group != value))
				{
					this.Onname_groupChanging(value);
					this.SendPropertyChanging();
					this._name_group = value;
					this.SendPropertyChanged("name_group");
					this.Onname_groupChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Group_Group_Sub", Storage="_Group_Sub", ThisKey="Id_group", OtherKey="groupID")]
		public EntitySet<Group_Sub> Group_Sub
		{
			get
			{
				return this._Group_Sub;
			}
			set
			{
				this._Group_Sub.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Group_Student", Storage="_Student", ThisKey="Id_group", OtherKey="groupID")]
		public EntitySet<Student> Student
		{
			get
			{
				return this._Student;
			}
			set
			{
				this._Student.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Group_Sub(Group_Sub entity)
		{
			this.SendPropertyChanging();
			entity.Group = this;
		}
		
		private void detach_Group_Sub(Group_Sub entity)
		{
			this.SendPropertyChanging();
			entity.Group = null;
		}
		
		private void attach_Student(Student entity)
		{
			this.SendPropertyChanging();
			entity.Group = this;
		}
		
		private void detach_Student(Student entity)
		{
			this.SendPropertyChanging();
			entity.Group = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Group_Sub")]
	public partial class Group_Sub : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id_rel;
		
		private System.Nullable<int> _groupID;
		
		private System.Nullable<int> _subID;
		
		private EntitySet<Schedule> _Schedule;
		
		private EntityRef<Group> _Group;
		
		private EntityRef<Subject> _Subject;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnId_relChanging(int value);
    partial void OnId_relChanged();
    partial void OngroupIDChanging(System.Nullable<int> value);
    partial void OngroupIDChanged();
    partial void OnsubIDChanging(System.Nullable<int> value);
    partial void OnsubIDChanged();
    #endregion
		
		public Group_Sub()
		{
			this._Schedule = new EntitySet<Schedule>(new Action<Schedule>(this.attach_Schedule), new Action<Schedule>(this.detach_Schedule));
			this._Group = default(EntityRef<Group>);
			this._Subject = default(EntityRef<Subject>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id_rel", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id_rel
		{
			get
			{
				return this._Id_rel;
			}
			set
			{
				if ((this._Id_rel != value))
				{
					this.OnId_relChanging(value);
					this.SendPropertyChanging();
					this._Id_rel = value;
					this.SendPropertyChanged("Id_rel");
					this.OnId_relChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_groupID", DbType="Int")]
		public System.Nullable<int> groupID
		{
			get
			{
				return this._groupID;
			}
			set
			{
				if ((this._groupID != value))
				{
					if (this._Group.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OngroupIDChanging(value);
					this.SendPropertyChanging();
					this._groupID = value;
					this.SendPropertyChanged("groupID");
					this.OngroupIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_subID", DbType="Int")]
		public System.Nullable<int> subID
		{
			get
			{
				return this._subID;
			}
			set
			{
				if ((this._subID != value))
				{
					if (this._Subject.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnsubIDChanging(value);
					this.SendPropertyChanging();
					this._subID = value;
					this.SendPropertyChanged("subID");
					this.OnsubIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Group_Sub_Schedule", Storage="_Schedule", ThisKey="Id_rel", OtherKey="relID")]
		public EntitySet<Schedule> Schedule
		{
			get
			{
				return this._Schedule;
			}
			set
			{
				this._Schedule.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Group_Group_Sub", Storage="_Group", ThisKey="groupID", OtherKey="Id_group", IsForeignKey=true)]
		public Group Group
		{
			get
			{
				return this._Group.Entity;
			}
			set
			{
				Group previousValue = this._Group.Entity;
				if (((previousValue != value) 
							|| (this._Group.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Group.Entity = null;
						previousValue.Group_Sub.Remove(this);
					}
					this._Group.Entity = value;
					if ((value != null))
					{
						value.Group_Sub.Add(this);
						this._groupID = value.Id_group;
					}
					else
					{
						this._groupID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Group");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Subject_Group_Sub", Storage="_Subject", ThisKey="subID", OtherKey="Id_sub", IsForeignKey=true)]
		public Subject Subject
		{
			get
			{
				return this._Subject.Entity;
			}
			set
			{
				Subject previousValue = this._Subject.Entity;
				if (((previousValue != value) 
							|| (this._Subject.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Subject.Entity = null;
						previousValue.Group_Sub.Remove(this);
					}
					this._Subject.Entity = value;
					if ((value != null))
					{
						value.Group_Sub.Add(this);
						this._subID = value.Id_sub;
					}
					else
					{
						this._subID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Subject");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Schedule(Schedule entity)
		{
			this.SendPropertyChanging();
			entity.Group_Sub = this;
		}
		
		private void detach_Schedule(Schedule entity)
		{
			this.SendPropertyChanging();
			entity.Group_Sub = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Lessons")]
	public partial class Lessons : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id_les;
		
		private string _type_les;
		
		private EntitySet<Mark> _Mark;
		
		private EntitySet<Schedule> _Schedule;
		
		private EntitySet<Translate> _Translate;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnId_lesChanging(int value);
    partial void OnId_lesChanged();
    partial void Ontype_lesChanging(string value);
    partial void Ontype_lesChanged();
    #endregion
		
		public Lessons()
		{
			this._Mark = new EntitySet<Mark>(new Action<Mark>(this.attach_Mark), new Action<Mark>(this.detach_Mark));
			this._Schedule = new EntitySet<Schedule>(new Action<Schedule>(this.attach_Schedule), new Action<Schedule>(this.detach_Schedule));
			this._Translate = new EntitySet<Translate>(new Action<Translate>(this.attach_Translate), new Action<Translate>(this.detach_Translate));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id_les", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id_les
		{
			get
			{
				return this._Id_les;
			}
			set
			{
				if ((this._Id_les != value))
				{
					this.OnId_lesChanging(value);
					this.SendPropertyChanging();
					this._Id_les = value;
					this.SendPropertyChanged("Id_les");
					this.OnId_lesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_type_les", DbType="Char(10)")]
		public string type_les
		{
			get
			{
				return this._type_les;
			}
			set
			{
				if ((this._type_les != value))
				{
					this.Ontype_lesChanging(value);
					this.SendPropertyChanging();
					this._type_les = value;
					this.SendPropertyChanged("type_les");
					this.Ontype_lesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Lessons_Mark", Storage="_Mark", ThisKey="Id_les", OtherKey="lesID")]
		public EntitySet<Mark> Mark
		{
			get
			{
				return this._Mark;
			}
			set
			{
				this._Mark.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Lessons_Schedule", Storage="_Schedule", ThisKey="Id_les", OtherKey="lesID")]
		public EntitySet<Schedule> Schedule
		{
			get
			{
				return this._Schedule;
			}
			set
			{
				this._Schedule.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Lessons_Translate", Storage="_Translate", ThisKey="Id_les", OtherKey="lesID")]
		public EntitySet<Translate> Translate
		{
			get
			{
				return this._Translate;
			}
			set
			{
				this._Translate.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Mark(Mark entity)
		{
			this.SendPropertyChanging();
			entity.Lessons = this;
		}
		
		private void detach_Mark(Mark entity)
		{
			this.SendPropertyChanging();
			entity.Lessons = null;
		}
		
		private void attach_Schedule(Schedule entity)
		{
			this.SendPropertyChanging();
			entity.Lessons = this;
		}
		
		private void detach_Schedule(Schedule entity)
		{
			this.SendPropertyChanging();
			entity.Lessons = null;
		}
		
		private void attach_Translate(Translate entity)
		{
			this.SendPropertyChanging();
			entity.Lessons = this;
		}
		
		private void detach_Translate(Translate entity)
		{
			this.SendPropertyChanging();
			entity.Lessons = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Mark")]
	public partial class Mark : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id_mark;
		
		private System.Nullable<int> _point;
		
		private string _date_p;
		
		private System.Nullable<int> _lesID;
		
		private System.Nullable<int> _studID;
		
		private System.Nullable<int> _subID;
		
		private EntityRef<Lessons> _Lessons;
		
		private EntityRef<Student> _Student;
		
		private EntityRef<Subject> _Subject;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnId_markChanging(int value);
    partial void OnId_markChanged();
    partial void OnpointChanging(System.Nullable<int> value);
    partial void OnpointChanged();
    partial void Ondate_pChanging(string value);
    partial void Ondate_pChanged();
    partial void OnlesIDChanging(System.Nullable<int> value);
    partial void OnlesIDChanged();
    partial void OnstudIDChanging(System.Nullable<int> value);
    partial void OnstudIDChanged();
    partial void OnsubIDChanging(System.Nullable<int> value);
    partial void OnsubIDChanged();
    #endregion
		
		public Mark()
		{
			this._Lessons = default(EntityRef<Lessons>);
			this._Student = default(EntityRef<Student>);
			this._Subject = default(EntityRef<Subject>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id_mark", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id_mark
		{
			get
			{
				return this._Id_mark;
			}
			set
			{
				if ((this._Id_mark != value))
				{
					this.OnId_markChanging(value);
					this.SendPropertyChanging();
					this._Id_mark = value;
					this.SendPropertyChanged("Id_mark");
					this.OnId_markChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_point", DbType="Int")]
		public System.Nullable<int> point
		{
			get
			{
				return this._point;
			}
			set
			{
				if ((this._point != value))
				{
					this.OnpointChanging(value);
					this.SendPropertyChanging();
					this._point = value;
					this.SendPropertyChanged("point");
					this.OnpointChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_date_p", DbType="NChar(10)")]
		public string date_p
		{
			get
			{
				return this._date_p;
			}
			set
			{
				if ((this._date_p != value))
				{
					this.Ondate_pChanging(value);
					this.SendPropertyChanging();
					this._date_p = value;
					this.SendPropertyChanged("date_p");
					this.Ondate_pChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_lesID", DbType="Int")]
		public System.Nullable<int> lesID
		{
			get
			{
				return this._lesID;
			}
			set
			{
				if ((this._lesID != value))
				{
					if (this._Lessons.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnlesIDChanging(value);
					this.SendPropertyChanging();
					this._lesID = value;
					this.SendPropertyChanged("lesID");
					this.OnlesIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_studID", DbType="Int")]
		public System.Nullable<int> studID
		{
			get
			{
				return this._studID;
			}
			set
			{
				if ((this._studID != value))
				{
					if (this._Student.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnstudIDChanging(value);
					this.SendPropertyChanging();
					this._studID = value;
					this.SendPropertyChanged("studID");
					this.OnstudIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_subID", DbType="Int")]
		public System.Nullable<int> subID
		{
			get
			{
				return this._subID;
			}
			set
			{
				if ((this._subID != value))
				{
					if (this._Subject.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnsubIDChanging(value);
					this.SendPropertyChanging();
					this._subID = value;
					this.SendPropertyChanged("subID");
					this.OnsubIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Lessons_Mark", Storage="_Lessons", ThisKey="lesID", OtherKey="Id_les", IsForeignKey=true)]
		public Lessons Lessons
		{
			get
			{
				return this._Lessons.Entity;
			}
			set
			{
				Lessons previousValue = this._Lessons.Entity;
				if (((previousValue != value) 
							|| (this._Lessons.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Lessons.Entity = null;
						previousValue.Mark.Remove(this);
					}
					this._Lessons.Entity = value;
					if ((value != null))
					{
						value.Mark.Add(this);
						this._lesID = value.Id_les;
					}
					else
					{
						this._lesID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Lessons");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Student_Mark", Storage="_Student", ThisKey="studID", OtherKey="Id_student", IsForeignKey=true)]
		public Student Student
		{
			get
			{
				return this._Student.Entity;
			}
			set
			{
				Student previousValue = this._Student.Entity;
				if (((previousValue != value) 
							|| (this._Student.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Student.Entity = null;
						previousValue.Mark.Remove(this);
					}
					this._Student.Entity = value;
					if ((value != null))
					{
						value.Mark.Add(this);
						this._studID = value.Id_student;
					}
					else
					{
						this._studID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Student");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Subject_Mark", Storage="_Subject", ThisKey="subID", OtherKey="Id_sub", IsForeignKey=true)]
		public Subject Subject
		{
			get
			{
				return this._Subject.Entity;
			}
			set
			{
				Subject previousValue = this._Subject.Entity;
				if (((previousValue != value) 
							|| (this._Subject.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Subject.Entity = null;
						previousValue.Mark.Remove(this);
					}
					this._Subject.Entity = value;
					if ((value != null))
					{
						value.Mark.Add(this);
						this._subID = value.Id_sub;
					}
					else
					{
						this._subID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Subject");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Practice")]
	public partial class Practice : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id_pr;
		
		private string _practice1;
		
		private System.Nullable<int> _themeID;
		
		private EntityRef<Theme> _Theme;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnId_prChanging(int value);
    partial void OnId_prChanged();
    partial void Onpractice1Changing(string value);
    partial void Onpractice1Changed();
    partial void OnthemeIDChanging(System.Nullable<int> value);
    partial void OnthemeIDChanged();
    #endregion
		
		public Practice()
		{
			this._Theme = default(EntityRef<Theme>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id_pr", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id_pr
		{
			get
			{
				return this._Id_pr;
			}
			set
			{
				if ((this._Id_pr != value))
				{
					this.OnId_prChanging(value);
					this.SendPropertyChanging();
					this._Id_pr = value;
					this.SendPropertyChanged("Id_pr");
					this.OnId_prChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="practice", Storage="_practice1", DbType="NVarChar(50)")]
		public string practice1
		{
			get
			{
				return this._practice1;
			}
			set
			{
				if ((this._practice1 != value))
				{
					this.Onpractice1Changing(value);
					this.SendPropertyChanging();
					this._practice1 = value;
					this.SendPropertyChanged("practice1");
					this.Onpractice1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_themeID", DbType="Int")]
		public System.Nullable<int> themeID
		{
			get
			{
				return this._themeID;
			}
			set
			{
				if ((this._themeID != value))
				{
					if (this._Theme.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnthemeIDChanging(value);
					this.SendPropertyChanging();
					this._themeID = value;
					this.SendPropertyChanged("themeID");
					this.OnthemeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Theme_Practice", Storage="_Theme", ThisKey="themeID", OtherKey="Id_theme", IsForeignKey=true)]
		public Theme Theme
		{
			get
			{
				return this._Theme.Entity;
			}
			set
			{
				Theme previousValue = this._Theme.Entity;
				if (((previousValue != value) 
							|| (this._Theme.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Theme.Entity = null;
						previousValue.Practice.Remove(this);
					}
					this._Theme.Entity = value;
					if ((value != null))
					{
						value.Practice.Add(this);
						this._themeID = value.Id_theme;
					}
					else
					{
						this._themeID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Theme");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Schedule")]
	public partial class Schedule : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id_sh;
		
		private System.Nullable<int> _day;
		
		private System.Nullable<int> _pair;
		
		private System.Nullable<int> _lesID;
		
		private System.Nullable<int> _relID;
		
		private EntityRef<Lessons> _Lessons;
		
		private EntityRef<Group_Sub> _Group_Sub;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnId_shChanging(int value);
    partial void OnId_shChanged();
    partial void OndayChanging(System.Nullable<int> value);
    partial void OndayChanged();
    partial void OnpairChanging(System.Nullable<int> value);
    partial void OnpairChanged();
    partial void OnlesIDChanging(System.Nullable<int> value);
    partial void OnlesIDChanged();
    partial void OnrelIDChanging(System.Nullable<int> value);
    partial void OnrelIDChanged();
    #endregion
		
		public Schedule()
		{
			this._Lessons = default(EntityRef<Lessons>);
			this._Group_Sub = default(EntityRef<Group_Sub>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id_sh", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id_sh
		{
			get
			{
				return this._Id_sh;
			}
			set
			{
				if ((this._Id_sh != value))
				{
					this.OnId_shChanging(value);
					this.SendPropertyChanging();
					this._Id_sh = value;
					this.SendPropertyChanged("Id_sh");
					this.OnId_shChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_day", DbType="Int")]
		public System.Nullable<int> day
		{
			get
			{
				return this._day;
			}
			set
			{
				if ((this._day != value))
				{
					this.OndayChanging(value);
					this.SendPropertyChanging();
					this._day = value;
					this.SendPropertyChanged("day");
					this.OndayChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_pair", DbType="Int")]
		public System.Nullable<int> pair
		{
			get
			{
				return this._pair;
			}
			set
			{
				if ((this._pair != value))
				{
					this.OnpairChanging(value);
					this.SendPropertyChanging();
					this._pair = value;
					this.SendPropertyChanged("pair");
					this.OnpairChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_lesID", DbType="Int")]
		public System.Nullable<int> lesID
		{
			get
			{
				return this._lesID;
			}
			set
			{
				if ((this._lesID != value))
				{
					if (this._Lessons.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnlesIDChanging(value);
					this.SendPropertyChanging();
					this._lesID = value;
					this.SendPropertyChanged("lesID");
					this.OnlesIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_relID", DbType="Int")]
		public System.Nullable<int> relID
		{
			get
			{
				return this._relID;
			}
			set
			{
				if ((this._relID != value))
				{
					if (this._Group_Sub.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnrelIDChanging(value);
					this.SendPropertyChanging();
					this._relID = value;
					this.SendPropertyChanged("relID");
					this.OnrelIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Lessons_Schedule", Storage="_Lessons", ThisKey="lesID", OtherKey="Id_les", IsForeignKey=true)]
		public Lessons Lessons
		{
			get
			{
				return this._Lessons.Entity;
			}
			set
			{
				Lessons previousValue = this._Lessons.Entity;
				if (((previousValue != value) 
							|| (this._Lessons.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Lessons.Entity = null;
						previousValue.Schedule.Remove(this);
					}
					this._Lessons.Entity = value;
					if ((value != null))
					{
						value.Schedule.Add(this);
						this._lesID = value.Id_les;
					}
					else
					{
						this._lesID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Lessons");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Group_Sub_Schedule", Storage="_Group_Sub", ThisKey="relID", OtherKey="Id_rel", IsForeignKey=true)]
		public Group_Sub Group_Sub
		{
			get
			{
				return this._Group_Sub.Entity;
			}
			set
			{
				Group_Sub previousValue = this._Group_Sub.Entity;
				if (((previousValue != value) 
							|| (this._Group_Sub.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Group_Sub.Entity = null;
						previousValue.Schedule.Remove(this);
					}
					this._Group_Sub.Entity = value;
					if ((value != null))
					{
						value.Schedule.Add(this);
						this._relID = value.Id_rel;
					}
					else
					{
						this._relID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Group_Sub");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Student")]
	public partial class Student : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id_student;
		
		private string _FIO;
		
		private string _mail;
		
		private System.Nullable<int> _groupID;
		
		private EntitySet<Mark> _Mark;
		
		private EntityRef<Group> _Group;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnId_studentChanging(int value);
    partial void OnId_studentChanged();
    partial void OnFIOChanging(string value);
    partial void OnFIOChanged();
    partial void OnmailChanging(string value);
    partial void OnmailChanged();
    partial void OngroupIDChanging(System.Nullable<int> value);
    partial void OngroupIDChanged();
    #endregion
		
		public Student()
		{
			this._Mark = new EntitySet<Mark>(new Action<Mark>(this.attach_Mark), new Action<Mark>(this.detach_Mark));
			this._Group = default(EntityRef<Group>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id_student", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id_student
		{
			get
			{
				return this._Id_student;
			}
			set
			{
				if ((this._Id_student != value))
				{
					this.OnId_studentChanging(value);
					this.SendPropertyChanging();
					this._Id_student = value;
					this.SendPropertyChanged("Id_student");
					this.OnId_studentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FIO", DbType="NVarChar(50)")]
		public string FIO
		{
			get
			{
				return this._FIO;
			}
			set
			{
				if ((this._FIO != value))
				{
					this.OnFIOChanging(value);
					this.SendPropertyChanging();
					this._FIO = value;
					this.SendPropertyChanged("FIO");
					this.OnFIOChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_mail", DbType="NChar(15)")]
		public string mail
		{
			get
			{
				return this._mail;
			}
			set
			{
				if ((this._mail != value))
				{
					this.OnmailChanging(value);
					this.SendPropertyChanging();
					this._mail = value;
					this.SendPropertyChanged("mail");
					this.OnmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_groupID", DbType="Int")]
		public System.Nullable<int> groupID
		{
			get
			{
				return this._groupID;
			}
			set
			{
				if ((this._groupID != value))
				{
					if (this._Group.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OngroupIDChanging(value);
					this.SendPropertyChanging();
					this._groupID = value;
					this.SendPropertyChanged("groupID");
					this.OngroupIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Student_Mark", Storage="_Mark", ThisKey="Id_student", OtherKey="studID")]
		public EntitySet<Mark> Mark
		{
			get
			{
				return this._Mark;
			}
			set
			{
				this._Mark.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Group_Student", Storage="_Group", ThisKey="groupID", OtherKey="Id_group", IsForeignKey=true)]
		public Group Group
		{
			get
			{
				return this._Group.Entity;
			}
			set
			{
				Group previousValue = this._Group.Entity;
				if (((previousValue != value) 
							|| (this._Group.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Group.Entity = null;
						previousValue.Student.Remove(this);
					}
					this._Group.Entity = value;
					if ((value != null))
					{
						value.Student.Add(this);
						this._groupID = value.Id_group;
					}
					else
					{
						this._groupID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Group");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Mark(Mark entity)
		{
			this.SendPropertyChanging();
			entity.Student = this;
		}
		
		private void detach_Mark(Mark entity)
		{
			this.SendPropertyChanging();
			entity.Student = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Subject")]
	public partial class Subject : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id_sub;
		
		private string _name_sub;
		
		private EntitySet<Group_Sub> _Group_Sub;
		
		private EntitySet<Mark> _Mark;
		
		private EntitySet<Theme> _Theme;
		
		private EntitySet<Translate> _Translate;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnId_subChanging(int value);
    partial void OnId_subChanged();
    partial void Onname_subChanging(string value);
    partial void Onname_subChanged();
    #endregion
		
		public Subject()
		{
			this._Group_Sub = new EntitySet<Group_Sub>(new Action<Group_Sub>(this.attach_Group_Sub), new Action<Group_Sub>(this.detach_Group_Sub));
			this._Mark = new EntitySet<Mark>(new Action<Mark>(this.attach_Mark), new Action<Mark>(this.detach_Mark));
			this._Theme = new EntitySet<Theme>(new Action<Theme>(this.attach_Theme), new Action<Theme>(this.detach_Theme));
			this._Translate = new EntitySet<Translate>(new Action<Translate>(this.attach_Translate), new Action<Translate>(this.detach_Translate));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id_sub", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id_sub
		{
			get
			{
				return this._Id_sub;
			}
			set
			{
				if ((this._Id_sub != value))
				{
					this.OnId_subChanging(value);
					this.SendPropertyChanging();
					this._Id_sub = value;
					this.SendPropertyChanged("Id_sub");
					this.OnId_subChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name_sub", DbType="NChar(10)")]
		public string name_sub
		{
			get
			{
				return this._name_sub;
			}
			set
			{
				if ((this._name_sub != value))
				{
					this.Onname_subChanging(value);
					this.SendPropertyChanging();
					this._name_sub = value;
					this.SendPropertyChanged("name_sub");
					this.Onname_subChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Subject_Group_Sub", Storage="_Group_Sub", ThisKey="Id_sub", OtherKey="subID")]
		public EntitySet<Group_Sub> Group_Sub
		{
			get
			{
				return this._Group_Sub;
			}
			set
			{
				this._Group_Sub.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Subject_Mark", Storage="_Mark", ThisKey="Id_sub", OtherKey="subID")]
		public EntitySet<Mark> Mark
		{
			get
			{
				return this._Mark;
			}
			set
			{
				this._Mark.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Subject_Theme", Storage="_Theme", ThisKey="Id_sub", OtherKey="subID")]
		public EntitySet<Theme> Theme
		{
			get
			{
				return this._Theme;
			}
			set
			{
				this._Theme.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Subject_Translate", Storage="_Translate", ThisKey="Id_sub", OtherKey="subID")]
		public EntitySet<Translate> Translate
		{
			get
			{
				return this._Translate;
			}
			set
			{
				this._Translate.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Group_Sub(Group_Sub entity)
		{
			this.SendPropertyChanging();
			entity.Subject = this;
		}
		
		private void detach_Group_Sub(Group_Sub entity)
		{
			this.SendPropertyChanging();
			entity.Subject = null;
		}
		
		private void attach_Mark(Mark entity)
		{
			this.SendPropertyChanging();
			entity.Subject = this;
		}
		
		private void detach_Mark(Mark entity)
		{
			this.SendPropertyChanging();
			entity.Subject = null;
		}
		
		private void attach_Theme(Theme entity)
		{
			this.SendPropertyChanging();
			entity.Subject = this;
		}
		
		private void detach_Theme(Theme entity)
		{
			this.SendPropertyChanging();
			entity.Subject = null;
		}
		
		private void attach_Translate(Translate entity)
		{
			this.SendPropertyChanging();
			entity.Subject = this;
		}
		
		private void detach_Translate(Translate entity)
		{
			this.SendPropertyChanging();
			entity.Subject = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Theme")]
	public partial class Theme : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id_theme;
		
		private string _name_theme;
		
		private System.Nullable<int> _subID;
		
		private EntitySet<Practice> _Practice;
		
		private EntitySet<Theor_ques> _Theor_ques;
		
		private EntityRef<Subject> _Subject;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnId_themeChanging(int value);
    partial void OnId_themeChanged();
    partial void Onname_themeChanging(string value);
    partial void Onname_themeChanged();
    partial void OnsubIDChanging(System.Nullable<int> value);
    partial void OnsubIDChanged();
    #endregion
		
		public Theme()
		{
			this._Practice = new EntitySet<Practice>(new Action<Practice>(this.attach_Practice), new Action<Practice>(this.detach_Practice));
			this._Theor_ques = new EntitySet<Theor_ques>(new Action<Theor_ques>(this.attach_Theor_ques), new Action<Theor_ques>(this.detach_Theor_ques));
			this._Subject = default(EntityRef<Subject>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id_theme", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id_theme
		{
			get
			{
				return this._Id_theme;
			}
			set
			{
				if ((this._Id_theme != value))
				{
					this.OnId_themeChanging(value);
					this.SendPropertyChanging();
					this._Id_theme = value;
					this.SendPropertyChanged("Id_theme");
					this.OnId_themeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name_theme", DbType="NVarChar(50)")]
		public string name_theme
		{
			get
			{
				return this._name_theme;
			}
			set
			{
				if ((this._name_theme != value))
				{
					this.Onname_themeChanging(value);
					this.SendPropertyChanging();
					this._name_theme = value;
					this.SendPropertyChanged("name_theme");
					this.Onname_themeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_subID", DbType="Int")]
		public System.Nullable<int> subID
		{
			get
			{
				return this._subID;
			}
			set
			{
				if ((this._subID != value))
				{
					if (this._Subject.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnsubIDChanging(value);
					this.SendPropertyChanging();
					this._subID = value;
					this.SendPropertyChanged("subID");
					this.OnsubIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Theme_Practice", Storage="_Practice", ThisKey="Id_theme", OtherKey="themeID")]
		public EntitySet<Practice> Practice
		{
			get
			{
				return this._Practice;
			}
			set
			{
				this._Practice.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Theme_Theor_ques", Storage="_Theor_ques", ThisKey="Id_theme", OtherKey="themeID")]
		public EntitySet<Theor_ques> Theor_ques
		{
			get
			{
				return this._Theor_ques;
			}
			set
			{
				this._Theor_ques.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Subject_Theme", Storage="_Subject", ThisKey="subID", OtherKey="Id_sub", IsForeignKey=true)]
		public Subject Subject
		{
			get
			{
				return this._Subject.Entity;
			}
			set
			{
				Subject previousValue = this._Subject.Entity;
				if (((previousValue != value) 
							|| (this._Subject.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Subject.Entity = null;
						previousValue.Theme.Remove(this);
					}
					this._Subject.Entity = value;
					if ((value != null))
					{
						value.Theme.Add(this);
						this._subID = value.Id_sub;
					}
					else
					{
						this._subID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Subject");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Practice(Practice entity)
		{
			this.SendPropertyChanging();
			entity.Theme = this;
		}
		
		private void detach_Practice(Practice entity)
		{
			this.SendPropertyChanging();
			entity.Theme = null;
		}
		
		private void attach_Theor_ques(Theor_ques entity)
		{
			this.SendPropertyChanging();
			entity.Theme = this;
		}
		
		private void detach_Theor_ques(Theor_ques entity)
		{
			this.SendPropertyChanging();
			entity.Theme = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Theor_ques")]
	public partial class Theor_ques : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id_q;
		
		private string _qestion;
		
		private System.Nullable<int> _themeID;
		
		private EntityRef<Theme> _Theme;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnId_qChanging(int value);
    partial void OnId_qChanged();
    partial void OnqestionChanging(string value);
    partial void OnqestionChanged();
    partial void OnthemeIDChanging(System.Nullable<int> value);
    partial void OnthemeIDChanged();
    #endregion
		
		public Theor_ques()
		{
			this._Theme = default(EntityRef<Theme>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id_q", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id_q
		{
			get
			{
				return this._Id_q;
			}
			set
			{
				if ((this._Id_q != value))
				{
					this.OnId_qChanging(value);
					this.SendPropertyChanging();
					this._Id_q = value;
					this.SendPropertyChanged("Id_q");
					this.OnId_qChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_qestion", DbType="NVarChar(50)")]
		public string qestion
		{
			get
			{
				return this._qestion;
			}
			set
			{
				if ((this._qestion != value))
				{
					this.OnqestionChanging(value);
					this.SendPropertyChanging();
					this._qestion = value;
					this.SendPropertyChanged("qestion");
					this.OnqestionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_themeID", DbType="Int")]
		public System.Nullable<int> themeID
		{
			get
			{
				return this._themeID;
			}
			set
			{
				if ((this._themeID != value))
				{
					if (this._Theme.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnthemeIDChanging(value);
					this.SendPropertyChanging();
					this._themeID = value;
					this.SendPropertyChanged("themeID");
					this.OnthemeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Theme_Theor_ques", Storage="_Theme", ThisKey="themeID", OtherKey="Id_theme", IsForeignKey=true)]
		public Theme Theme
		{
			get
			{
				return this._Theme.Entity;
			}
			set
			{
				Theme previousValue = this._Theme.Entity;
				if (((previousValue != value) 
							|| (this._Theme.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Theme.Entity = null;
						previousValue.Theor_ques.Remove(this);
					}
					this._Theme.Entity = value;
					if ((value != null))
					{
						value.Theor_ques.Add(this);
						this._themeID = value.Id_theme;
					}
					else
					{
						this._themeID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Theme");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Translate")]
	public partial class Translate : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id_trans;
		
		private System.Nullable<int> _max_point;
		
		private System.Nullable<int> @__34point;
		
		private System.Nullable<int> @__45point;
		
		private System.Nullable<int> _min_point;
		
		private System.Nullable<int> _subID;
		
		private System.Nullable<int> _lesID;
		
		private EntityRef<Lessons> _Lessons;
		
		private EntityRef<Subject> _Subject;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnId_transChanging(int value);
    partial void OnId_transChanged();
    partial void Onmax_pointChanging(System.Nullable<int> value);
    partial void Onmax_pointChanged();
    partial void On_34pointChanging(System.Nullable<int> value);
    partial void On_34pointChanged();
    partial void On_45pointChanging(System.Nullable<int> value);
    partial void On_45pointChanged();
    partial void Onmin_pointChanging(System.Nullable<int> value);
    partial void Onmin_pointChanged();
    partial void OnsubIDChanging(System.Nullable<int> value);
    partial void OnsubIDChanged();
    partial void OnlesIDChanging(System.Nullable<int> value);
    partial void OnlesIDChanged();
    #endregion
		
		public Translate()
		{
			this._Lessons = default(EntityRef<Lessons>);
			this._Subject = default(EntityRef<Subject>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id_trans", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id_trans
		{
			get
			{
				return this._Id_trans;
			}
			set
			{
				if ((this._Id_trans != value))
				{
					this.OnId_transChanging(value);
					this.SendPropertyChanging();
					this._Id_trans = value;
					this.SendPropertyChanged("Id_trans");
					this.OnId_transChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_max_point", DbType="Int")]
		public System.Nullable<int> max_point
		{
			get
			{
				return this._max_point;
			}
			set
			{
				if ((this._max_point != value))
				{
					this.Onmax_pointChanging(value);
					this.SendPropertyChanging();
					this._max_point = value;
					this.SendPropertyChanged("max_point");
					this.Onmax_pointChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[34point]", Storage="__34point", DbType="Int")]
		public System.Nullable<int> _34point
		{
			get
			{
				return this.@__34point;
			}
			set
			{
				if ((this.@__34point != value))
				{
					this.On_34pointChanging(value);
					this.SendPropertyChanging();
					this.@__34point = value;
					this.SendPropertyChanged("_34point");
					this.On_34pointChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[45point]", Storage="__45point", DbType="Int")]
		public System.Nullable<int> _45point
		{
			get
			{
				return this.@__45point;
			}
			set
			{
				if ((this.@__45point != value))
				{
					this.On_45pointChanging(value);
					this.SendPropertyChanging();
					this.@__45point = value;
					this.SendPropertyChanged("_45point");
					this.On_45pointChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_min_point", DbType="Int")]
		public System.Nullable<int> min_point
		{
			get
			{
				return this._min_point;
			}
			set
			{
				if ((this._min_point != value))
				{
					this.Onmin_pointChanging(value);
					this.SendPropertyChanging();
					this._min_point = value;
					this.SendPropertyChanged("min_point");
					this.Onmin_pointChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_subID", DbType="Int")]
		public System.Nullable<int> subID
		{
			get
			{
				return this._subID;
			}
			set
			{
				if ((this._subID != value))
				{
					if (this._Subject.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnsubIDChanging(value);
					this.SendPropertyChanging();
					this._subID = value;
					this.SendPropertyChanged("subID");
					this.OnsubIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_lesID", DbType="Int")]
		public System.Nullable<int> lesID
		{
			get
			{
				return this._lesID;
			}
			set
			{
				if ((this._lesID != value))
				{
					if (this._Lessons.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnlesIDChanging(value);
					this.SendPropertyChanging();
					this._lesID = value;
					this.SendPropertyChanged("lesID");
					this.OnlesIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Lessons_Translate", Storage="_Lessons", ThisKey="lesID", OtherKey="Id_les", IsForeignKey=true)]
		public Lessons Lessons
		{
			get
			{
				return this._Lessons.Entity;
			}
			set
			{
				Lessons previousValue = this._Lessons.Entity;
				if (((previousValue != value) 
							|| (this._Lessons.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Lessons.Entity = null;
						previousValue.Translate.Remove(this);
					}
					this._Lessons.Entity = value;
					if ((value != null))
					{
						value.Translate.Add(this);
						this._lesID = value.Id_les;
					}
					else
					{
						this._lesID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Lessons");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Subject_Translate", Storage="_Subject", ThisKey="subID", OtherKey="Id_sub", IsForeignKey=true)]
		public Subject Subject
		{
			get
			{
				return this._Subject.Entity;
			}
			set
			{
				Subject previousValue = this._Subject.Entity;
				if (((previousValue != value) 
							|| (this._Subject.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Subject.Entity = null;
						previousValue.Translate.Remove(this);
					}
					this._Subject.Entity = value;
					if ((value != null))
					{
						value.Translate.Add(this);
						this._subID = value.Id_sub;
					}
					else
					{
						this._subID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Subject");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Type_answer")]
	public partial class Type_answer : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id_ans;
		
		private string _tanswer;
		
		private System.Nullable<int> _questID;
		
		private EntityRef<Type_question> _Type_question;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnId_ansChanging(int value);
    partial void OnId_ansChanged();
    partial void OntanswerChanging(string value);
    partial void OntanswerChanged();
    partial void OnquestIDChanging(System.Nullable<int> value);
    partial void OnquestIDChanged();
    #endregion
		
		public Type_answer()
		{
			this._Type_question = default(EntityRef<Type_question>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id_ans", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id_ans
		{
			get
			{
				return this._Id_ans;
			}
			set
			{
				if ((this._Id_ans != value))
				{
					this.OnId_ansChanging(value);
					this.SendPropertyChanging();
					this._Id_ans = value;
					this.SendPropertyChanged("Id_ans");
					this.OnId_ansChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_tanswer", DbType="NVarChar(50)")]
		public string tanswer
		{
			get
			{
				return this._tanswer;
			}
			set
			{
				if ((this._tanswer != value))
				{
					this.OntanswerChanging(value);
					this.SendPropertyChanging();
					this._tanswer = value;
					this.SendPropertyChanged("tanswer");
					this.OntanswerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_questID", DbType="Int")]
		public System.Nullable<int> questID
		{
			get
			{
				return this._questID;
			}
			set
			{
				if ((this._questID != value))
				{
					if (this._Type_question.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnquestIDChanging(value);
					this.SendPropertyChanging();
					this._questID = value;
					this.SendPropertyChanged("questID");
					this.OnquestIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Type_question_Type_answer", Storage="_Type_question", ThisKey="questID", OtherKey="Id_tq", IsForeignKey=true)]
		public Type_question Type_question
		{
			get
			{
				return this._Type_question.Entity;
			}
			set
			{
				Type_question previousValue = this._Type_question.Entity;
				if (((previousValue != value) 
							|| (this._Type_question.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Type_question.Entity = null;
						previousValue.Type_answer.Remove(this);
					}
					this._Type_question.Entity = value;
					if ((value != null))
					{
						value.Type_answer.Add(this);
						this._questID = value.Id_tq;
					}
					else
					{
						this._questID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Type_question");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Type_question")]
	public partial class Type_question : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id_tq;
		
		private string _tquestion;
		
		private EntitySet<Type_answer> _Type_answer;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnId_tqChanging(int value);
    partial void OnId_tqChanged();
    partial void OntquestionChanging(string value);
    partial void OntquestionChanged();
    #endregion
		
		public Type_question()
		{
			this._Type_answer = new EntitySet<Type_answer>(new Action<Type_answer>(this.attach_Type_answer), new Action<Type_answer>(this.detach_Type_answer));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id_tq", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id_tq
		{
			get
			{
				return this._Id_tq;
			}
			set
			{
				if ((this._Id_tq != value))
				{
					this.OnId_tqChanging(value);
					this.SendPropertyChanging();
					this._Id_tq = value;
					this.SendPropertyChanged("Id_tq");
					this.OnId_tqChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_tquestion", DbType="NVarChar(50)")]
		public string tquestion
		{
			get
			{
				return this._tquestion;
			}
			set
			{
				if ((this._tquestion != value))
				{
					this.OntquestionChanging(value);
					this.SendPropertyChanging();
					this._tquestion = value;
					this.SendPropertyChanged("tquestion");
					this.OntquestionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Type_question_Type_answer", Storage="_Type_answer", ThisKey="Id_tq", OtherKey="questID")]
		public EntitySet<Type_answer> Type_answer
		{
			get
			{
				return this._Type_answer;
			}
			set
			{
				this._Type_answer.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Type_answer(Type_answer entity)
		{
			this.SendPropertyChanging();
			entity.Type_question = this;
		}
		
		private void detach_Type_answer(Type_answer entity)
		{
			this.SendPropertyChanging();
			entity.Type_question = null;
		}
	}
}
#pragma warning restore 1591
